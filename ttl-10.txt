git
1.버전관리 가능
2.작업내역을 확인 가능(히스토리파악)
3.작업단위를 나눌 수 있다.
4.협업 프로젝트를 만드는데 유용하다

github
1.git 원격 저장소 + git 으로 할 수 있는 커뮤니티 기능 서비스

sourcetree
1.git을 쉽게 사용할수있게 돕는 도구모음

commit
1.현재 프로젝트의 상태를 저장하는것

-sorcetre에서 git 관리 폴더 설정하기
프로젝트를 git 프로젝트로 설정하는 것을 git 초기화(initialze, init)라고 한다.

-commit작업은 각각 따로 설정할 수 있으며
삭제된 부분은 붉은색으로 -
추가된 부분은 초록색으로 + 로 표시되어 한눈에 볼 수 있다.

-commit작업시는 작업내용을 상세하게 적어두어 한눈에 파악이 가능할 수 있게 해야한다.

원격repo(github)사용해보기
1.원격repo : 내 컴퓨터에 저장되어있는 로컬 repo를 github처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는것 
2.로컬repo : git으로 관리되는 프로젝트

-원격repo를 사용하여 개발자들끼리 코드와 프로그램의 변경내용등을 공유한다.
-로컬repo의 내용을 원격repo에 반영하는것을 push , 가져오는 것을 pull 이라고 부른다.

3.push/pull
혼자git작업을 할때는
pull-> 로컬 repo commit -> push의 순서로 진행하는것이 좋다.

4.issue할당
issue : 프로그램에서 해결해야하는 문제
-협업과정에서는 각자 issue를 할당받고 각자 문제를 해결해야 서로같은 문제로 충돌이 발생하지 않는다. 

5.brench
각각의 문제해결을 위한 가지, 특정 커밋에서 갈라져 나온다.
예시) 메인brench-문제해결을 위한 각각의 brench(기능별)
-브랜치 삭제도 가능함 (삭제하면 커밋내용도 삭제된다.)

6.merge(병합)
작업합치기 개념
-각각브랜치의 작업내용을 하나로 반영하여 합치는 것
-mergr conflict
하나의 파일을 여러가지 브랜치에서 수정,병합 하려고 할때, 충돌이 발생한다.
충돌 발생시 원본을 수정하고 다시 커밋한다.(새로운내용추가는 하지 말것)

git을 통해서 개발자들이 협업을 한다는 것이 흥미로웠고 github에도 형식을 잘 지켜서 업데이트해야 협업하는 개발자도 알아보기 쉬울것같다.
똑똑한 프로그램이라서 push와 pull이 손쉽고 편했다.
commit을 하면 변경된부분이 알아서 정리되는 것도 정말 좋았다.
